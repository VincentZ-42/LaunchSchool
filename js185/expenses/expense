#!/usr/bin/env node

const { Client } = require('pg');

async function logAndExit(error) {
	console.log(error);
	process.exit(1);
}

class ExpenseData {
	constructor() {
		this.client = new Client({ database: 'expenses'});
	}
	
	async addExpense(amount, memo) {
		await this.client.connect().catch(err => logAndExit(err));
		let date = new Date();
		date = date.toLocaleDateString();
		let values = [amount, memo, date];
		let text = `INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)`
	
		await this.client.query(text, values).catch(err => logAndExit(err));
	
		await this.client.end().catch(err => logAndExit(err));
	};	

	async listExpenses() {
		let query = "SELECT * from expenses ORDER BY created_on";

		await this.client.connect().catch(err => logAndExit(err));
	
		let data = await this.client.query(query).catch(err => logAndExit(err));
	
		for (let i = 0; i < data.rowCount; i++) {
			const row = [
				`${data.rows[i].id}`.padStart(3),
				data.rows[i].created_on.toDateString().padStart(10),
				data.rows[i].amount.padStart(12),
				data.rows[i].memo
			]
			console.log(row.join(` | `));
		}
		await this.client.end().catch(err => logAndExit(err));
	}
}

class CLI {
	constructor() {
		this.application = new ExpenseData();
	}

	static HELP() {
		const info = `An expense recording system

Commands:
		
add AMOUNT MEMO [DATE] - record a new expense
clear - delete all expenses
list - list all expenses
delete NUMBER - remove expense with id NUMBER
search QUERY - list expenses with a matching memo field`
return info;
	}

	displayHelp() {
		console.log(CLI.HELP());
	}

	async run(args) {
		if (args.length === 0) {
			this.displayHelp();
		} else {
			let cmd = args[0];
			if (cmd.toLowerCase() === 'list') {
				this.application.listExpenses();
			} else if (cmd.toLowerCase() === 'add') {
				if (args.length < 3) {
					console.log('You must provide an ammount and memo');
				} else {
					this.application.addExpense(args[1], args[2]);
				}
			}
		}
	}
}

let app = new CLI();
app.run(process.argv.slice(2));
